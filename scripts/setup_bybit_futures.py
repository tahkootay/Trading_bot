#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit Futures API
"""

import asyncio
import sys
from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

# Add src to path
src_path = str(Path(__file__).parent.parent / "src")
sys.path.insert(0, src_path)

from src.data_collector.bybit_client import BybitHTTPClient
from src.utils.types import TimeFrame

async def test_bybit_futures():
    print("üöÄ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit Futures API")
    print("=" * 50)
    
    # Load environment
    load_dotenv()
    
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    
    if not api_key or not api_secret:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BYBIT_API_KEY –∏ BYBIT_API_SECRET")
        return False
    
    print(f"üîë API Key: {api_key[:8]}...")
    
    # Test both testnet and mainnet
    for testnet in [True, False]:
        env_name = "TESTNET" if testnet else "MAINNET"
        print(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {env_name}:")
        print("-" * 30)
        
        try:
            client = BybitHTTPClient(
                api_key=api_key,
                api_secret=api_secret,
                testnet=testnet,
                rate_limit=1  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            )
            
            async with client:
                # 1. Test public data (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                print("üìä –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                
                try:
                    ticker = await client.get_ticker("SOLUSDT")
                    if ticker:
                        print(f"  ‚úÖ Ticker: ${ticker.price:.2f} (bid: ${ticker.bid:.2f}, ask: ${ticker.ask:.2f})")
                    else:
                        print("  ‚ùå Ticker –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                except Exception as e:
                    print(f"  ‚ùå Ticker –æ—à–∏–±–∫–∞: {e}")
                
                # 2. Test klines (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
                print("\nüìà –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
                
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
                    candles = await client.get_klines(
                        symbol="SOLUSDT",
                        interval=TimeFrame.H1,
                        limit=10
                    )
                    
                    if candles:
                        print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π")
                        latest = candles[0]
                        print(f"  üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {latest.timestamp}")
                        print(f"  üí∞ OHLC: O=${latest.open:.2f} H=${latest.high:.2f} L=${latest.low:.2f} C=${latest.close:.2f}")
                        print(f"  üìä Volume: {latest.volume:,.0f}")
                    else:
                        print("  ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                        
                except Exception as e:
                    print(f"  ‚ùå Klines –æ—à–∏–±–∫–∞: {e}")
                
                # 3. Test —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                print("\n‚è∞ –¢–µ—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
                
                try:
                    end_time = datetime.now()
                    start_time = end_time - timedelta(hours=24)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                    
                    candles_time = await client.get_klines(
                        symbol="SOLUSDT",
                        interval=TimeFrame.H1,
                        limit=24,
                        start_time=int(start_time.timestamp() * 1000),
                        end_time=int(end_time.timestamp() * 1000)
                    )
                    
                    if candles_time:
                        print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(candles_time)} —Å–≤–µ—á–µ–π –∑–∞ 24—á")
                        period_start = candles_time[-1].timestamp
                        period_end = candles_time[0].timestamp
                        print(f"  üìÖ –ü–µ—Ä–∏–æ–¥: {period_start} ‚Üí {period_end}")
                    else:
                        print("  ‚ùå –î–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                        
                except Exception as e:
                    print(f"  ‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—à–∏–±–∫–∞: {e}")
                
                # 4. Test account data (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                print("\nüîê –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                
                try:
                    account = await client.get_account_info()
                    if account:
                        print(f"  ‚úÖ Account: Balance=${account.available_balance:.2f}")
                        print(f"  üìä Total: ${account.total_balance:.2f}")
                        return True  # –£—Å–ø–µ—Ö!
                    else:
                        print("  ‚ùå Account info –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                except Exception as e:
                    print(f"  ‚ùå Account –æ—à–∏–±–∫–∞: {e}")
                    if "expired" in str(e).lower() or "33004" in str(e):
                        print("  üîÑ API –∫–ª—é—á –∏—Å—Ç–µ–∫ - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å")
                    elif "permissions" in str(e).lower():
                        print("  üîë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ {env_name}: {e}")
    
    return False

def create_env_template():
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞"""
    template = """# Bybit API Configuration
BYBIT_API_KEY=your_api_key_here
BYBIT_API_SECRET=your_api_secret_here

# Trading Configuration  
SYMBOL=SOLUSDT
INITIAL_BALANCE=10000
COMMISSION_RATE=0.001

# Telegram Notifications (optional)
TELEGRAM_BOT_TOKEN=your_telegram_token
TELEGRAM_CHAT_ID=your_chat_id
"""
    
    env_path = Path(".env.example")
    if not env_path.exists():
        with open(env_path, "w") as f:
            f.write(template)
        print(f"üìù –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {env_path}")
        print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

async def main():
    success = await test_bybit_futures()
    
    if success:
        print(f"\nüéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit Futures —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
        print(f"‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–æ—Ä–≥–æ–≤–ª—é")
    else:
        print(f"\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bybit")
        print(f"üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print(f"  1. –û–±–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ")
        print(f"  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–µ–π (Futures Trading, Read)")
        print(f"  3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ IP –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist")
        
        create_env_template()
    
    return success

if __name__ == "__main__":
    asyncio.run(main())