#!/usr/bin/env python3
"""
Live —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–°–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: stop-loss, max exposure, –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
"""

import time
import asyncio
from typing import Dict, Any, Optional, List, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from enum import Enum
import logging
import json


class RiskLevel(str, Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class RiskAction(str, Enum):
    """–î–µ–π—Å—Ç–≤–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞."""
    ALLOW = "allow"
    REDUCE_SIZE = "reduce_size"
    BLOCK = "block"
    FORCE_CLOSE = "force_close"


@dataclass
class RiskLimits:
    """–õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞."""
    max_position_size_usd: float = 1000.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USD
    max_total_exposure_usd: float = 5000.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±—â–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è
    max_daily_loss_usd: float = 500.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –ø–æ—Ç–µ—Ä—è
    max_drawdown_pct: float = 0.05  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (5%)
    min_trade_interval_sec: int = 300  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ (5 –º–∏–Ω)
    max_trades_per_hour: int = 10  # –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å
    max_trades_per_day: int = 50  # –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
    stop_loss_pct: float = 0.02  # Stop-loss –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (2%)
    take_profit_pct: float = 0.04  # Take-profit –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (4%)
    max_correlation_exposure: float = 0.7  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏


@dataclass
class TradeRecord:
    """–ó–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    timestamp: datetime
    symbol: str
    side: str
    size: float
    price: float
    pnl: float = 0.0
    closed: bool = False


@dataclass
class PositionRisk:
    """–†–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏."""
    symbol: str
    size: float
    entry_price: float
    current_price: float
    unrealized_pnl: float
    risk_level: RiskLevel
    stop_loss_price: Optional[float] = None
    take_profit_price: Optional[float] = None
    time_in_position: timedelta = field(default_factory=lambda: timedelta())
    
    
class LiveRiskManager:
    """
    Live —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∏—Å–∫–æ–≤ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ.
    –°–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å stop-loss, max exposure –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.
    """
    
    def __init__(self, risk_limits: Optional[RiskLimits] = None, 
                 initial_balance: float = 10000.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            risk_limits: –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞
            initial_balance: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        """
        self.risk_limits = risk_limits or RiskLimits()
        self.initial_balance = initial_balance
        self.current_balance = initial_balance
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.active_positions: Dict[str, PositionRisk] = {}
        self.trade_history: List[TradeRecord] = []
        self.last_trade_time: Optional[datetime] = None
        self.daily_pnl = 0.0
        self.daily_trade_count = 0
        self.hourly_trade_count = 0
        self.last_hour_reset = datetime.now().replace(minute=0, second=0, microsecond=0)
        self.last_day_reset = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.trading_blocked = False
        self.block_reason = ""
        self.emergency_stop = False
        
        # –ö–æ–ª–±—ç–∫–∏
        self.on_risk_alert = None
        self.on_stop_loss = None
        self.on_take_profit = None
        self.on_emergency_stop = None
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)
        
        self.logger.info("üõ°Ô∏è Risk Manager initialized")
        self._log_risk_limits()
    
    def _log_risk_limits(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞."""
        limits = {
            'max_position_size_usd': self.risk_limits.max_position_size_usd,
            'max_total_exposure_usd': self.risk_limits.max_total_exposure_usd,
            'max_daily_loss_usd': self.risk_limits.max_daily_loss_usd,
            'stop_loss_pct': self.risk_limits.stop_loss_pct * 100,
            'min_trade_interval_sec': self.risk_limits.min_trade_interval_sec
        }
        self.logger.info(f"üìä Risk limits: {limits}")
    
    def validate_new_trade(self, symbol: str, side: str, size: float, 
                          price: float) -> Tuple[RiskAction, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∏—Å–∫-–ª–∏–º–∏—Ç–∞–º.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('buy' –∏–ª–∏ 'sell')
            size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            
        Returns:
            (RiskAction, reason) - –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø—Ä–∏—á–∏–Ω–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.emergency_stop:
                return RiskAction.BLOCK, "Emergency stop activated"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if self.trading_blocked:
                return RiskAction.BLOCK, f"Trading blocked: {self.block_reason}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            self._update_time_counters()
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            time_check = self._check_time_limits()
            if time_check[0] != RiskAction.ALLOW:
                return time_check
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
            count_check = self._check_trade_count_limits()
            if count_check[0] != RiskAction.ALLOW:
                return count_check
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_value = size * price
            if position_value > self.risk_limits.max_position_size_usd:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä
                suggested_size = self.risk_limits.max_position_size_usd / price
                return RiskAction.REDUCE_SIZE, f"Position too large, suggested: {suggested_size:.4f}"
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
            current_exposure = self._calculate_total_exposure()
            new_exposure = current_exposure + position_value
            
            if new_exposure > self.risk_limits.max_total_exposure_usd:
                return RiskAction.BLOCK, f"Total exposure limit exceeded: {new_exposure:.2f} > {self.risk_limits.max_total_exposure_usd:.2f}"
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–π –ø–æ—Ç–µ—Ä–∏
            if self.daily_pnl < -self.risk_limits.max_daily_loss_usd:
                return RiskAction.BLOCK, f"Daily loss limit exceeded: {self.daily_pnl:.2f}"
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
            drawdown_check = self._check_drawdown()
            if drawdown_check[0] != RiskAction.ALLOW:
                return drawdown_check
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–∑–∏—Ü–∏–∏)
            correlation_check = self._check_correlation_risk(symbol, position_value)
            if correlation_check[0] != RiskAction.ALLOW:
                return correlation_check
            
            return RiskAction.ALLOW, "Trade approved"
            
        except Exception as e:
            self.logger.error(f"Error validating trade: {e}")
            return RiskAction.BLOCK, f"Validation error: {str(e)}"
    
    def _update_time_counters(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤."""
        now = datetime.now()
        
        # –°–±—Ä–æ—Å –ø–æ—á–∞—Å–æ–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
        current_hour = now.replace(minute=0, second=0, microsecond=0)
        if current_hour > self.last_hour_reset:
            self.hourly_trade_count = 0
            self.last_hour_reset = current_hour
        
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
        current_day = now.replace(hour=0, minute=0, second=0, microsecond=0)
        if current_day > self.last_day_reset:
            self.daily_trade_count = 0
            self.daily_pnl = 0.0
            self.last_day_reset = current_day
            self.logger.info("üìÖ Daily counters reset")
    
    def _check_time_limits(self) -> Tuple[RiskAction, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏."""
        if self.last_trade_time is None:
            return RiskAction.ALLOW, "First trade"
        
        time_since_last = (datetime.now() - self.last_trade_time).total_seconds()
        
        if time_since_last < self.risk_limits.min_trade_interval_sec:
            remaining = self.risk_limits.min_trade_interval_sec - time_since_last
            return RiskAction.BLOCK, f"Min interval not met, wait {remaining:.0f}s"
        
        return RiskAction.ALLOW, "Time limit OK"
    
    def _check_trade_count_limits(self) -> Tuple[RiskAction, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫."""
        if self.hourly_trade_count >= self.risk_limits.max_trades_per_hour:
            return RiskAction.BLOCK, f"Hourly trade limit exceeded: {self.hourly_trade_count}"
        
        if self.daily_trade_count >= self.risk_limits.max_trades_per_day:
            return RiskAction.BLOCK, f"Daily trade limit exceeded: {self.daily_trade_count}"
        
        return RiskAction.ALLOW, "Count limits OK"
    
    def _calculate_total_exposure(self) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏."""
        total = 0.0
        for position in self.active_positions.values():
            total += abs(position.size * position.current_price)
        return total
    
    def _check_drawdown(self) -> Tuple[RiskAction, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏."""
        if self.current_balance <= 0:
            return RiskAction.FORCE_CLOSE, "Zero balance"
        
        drawdown = (self.initial_balance - self.current_balance) / self.initial_balance
        
        if drawdown > self.risk_limits.max_drawdown_pct:
            return RiskAction.FORCE_CLOSE, f"Max drawdown exceeded: {drawdown:.2%}"
        
        return RiskAction.ALLOW, "Drawdown OK"
    
    def _check_correlation_risk(self, symbol: str, position_value: float) -> Tuple[RiskAction, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏."""
        if not self.active_positions:
            return RiskAction.ALLOW, "No existing positions"
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–æ–º –∂–µ –∞–∫—Ç–∏–≤–µ
        base_asset = symbol.split('/')[0] if '/' in symbol else symbol[:3]
        
        correlated_exposure = 0.0
        for pos_symbol, position in self.active_positions.items():
            pos_base = pos_symbol.split('/')[0] if '/' in pos_symbol else pos_symbol[:3]
            if pos_base == base_asset:
                correlated_exposure += abs(position.size * position.current_price)
        
        total_correlated = correlated_exposure + position_value
        correlation_ratio = total_correlated / self.current_balance
        
        if correlation_ratio > self.risk_limits.max_correlation_exposure:
            return RiskAction.REDUCE_SIZE, f"High correlation risk: {correlation_ratio:.2%}"
        
        return RiskAction.ALLOW, "Correlation OK"
    
    def add_position(self, symbol: str, side: str, size: float, entry_price: float) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            
        Returns:
            bool - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º stop-loss –∏ take-profit
            if side == 'buy':
                stop_loss = entry_price * (1 - self.risk_limits.stop_loss_pct)
                take_profit = entry_price * (1 + self.risk_limits.take_profit_pct)
            else:
                stop_loss = entry_price * (1 + self.risk_limits.stop_loss_pct)
                take_profit = entry_price * (1 - self.risk_limits.take_profit_pct)
            
            position_risk = PositionRisk(
                symbol=symbol,
                size=size,
                entry_price=entry_price,
                current_price=entry_price,
                unrealized_pnl=0.0,
                risk_level=RiskLevel.LOW,
                stop_loss_price=stop_loss,
                take_profit_price=take_profit
            )
            
            self.active_positions[symbol] = position_risk
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            self.last_trade_time = datetime.now()
            self.hourly_trade_count += 1
            self.daily_trade_count += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ
            trade_record = TradeRecord(
                timestamp=datetime.now(),
                symbol=symbol,
                side=side,
                size=size,
                price=entry_price
            )
            self.trade_history.append(trade_record)
            
            self.logger.info(f"üìà Added position: {symbol} {side} {size} @ {entry_price} | SL: {stop_loss:.4f} | TP: {take_profit:.4f}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"Error adding position: {e}")
            return False
    
    def update_position_prices(self, price_updates: Dict[str, float]):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ stop-loss/take-profit.
        
        Args:
            price_updates: –°–ª–æ–≤–∞—Ä—å {symbol: current_price}
        """
        positions_to_close = []
        
        for symbol, current_price in price_updates.items():
            if symbol not in self.active_positions:
                continue
            
            position = self.active_positions[symbol]
            position.current_price = current_price
            
            # –û–±–Ω–æ–≤–ª—è–µ–º unrealized PnL
            if position.size > 0:  # Long position
                position.unrealized_pnl = position.size * (current_price - position.entry_price)
            else:  # Short position
                position.unrealized_pnl = position.size * (position.entry_price - current_price)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º stop-loss
            stop_loss_hit = False
            take_profit_hit = False
            
            if position.size > 0:  # Long position
                if current_price <= position.stop_loss_price:
                    stop_loss_hit = True
                elif current_price >= position.take_profit_price:
                    take_profit_hit = True
            else:  # Short position
                if current_price >= position.stop_loss_price:
                    stop_loss_hit = True
                elif current_price <= position.take_profit_price:
                    take_profit_hit = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            position.risk_level = self._calculate_position_risk_level(position)
            
            # –û—Ç–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            if stop_loss_hit:
                positions_to_close.append((symbol, "stop_loss"))
                self.logger.warning(f"üõë STOP LOSS hit for {symbol} at {current_price}")
            elif take_profit_hit:
                positions_to_close.append((symbol, "take_profit"))
                self.logger.info(f"üéØ TAKE PROFIT hit for {symbol} at {current_price}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
        for symbol, reason in positions_to_close:
            self._trigger_position_close(symbol, reason)
    
    def _calculate_position_risk_level(self, position: PositionRisk) -> RiskLevel:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏."""
        if position.entry_price == 0:
            return RiskLevel.LOW
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç –≤—Ö–æ–¥–∞
        price_change_pct = abs(position.current_price - position.entry_price) / position.entry_price
        
        if price_change_pct < 0.01:  # < 1%
            return RiskLevel.LOW
        elif price_change_pct < 0.03:  # < 3%
            return RiskLevel.MEDIUM
        elif price_change_pct < 0.05:  # < 5%
            return RiskLevel.HIGH
        else:
            return RiskLevel.CRITICAL
    
    def _trigger_position_close(self, symbol: str, reason: str):
        """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏."""
        position = self.active_positions.get(symbol)
        if not position:
            return
        
        if reason == "stop_loss" and self.on_stop_loss:
            self.on_stop_loss(symbol, position)
        elif reason == "take_profit" and self.on_take_profit:
            self.on_take_profit(symbol, position)
    
    def close_position(self, symbol: str, close_price: float, reason: str = "manual"):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –ø–æ–∑–∏—Ü–∏–∏
            close_price: –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        if symbol not in self.active_positions:
            self.logger.warning(f"Position {symbol} not found for closing")
            return
        
        position = self.active_positions[symbol]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL
        if position.size > 0:  # Long position
            pnl = position.size * (close_price - position.entry_price)
        else:  # Short position
            pnl = position.size * (position.entry_price - close_price)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ PnL
        self.current_balance += pnl
        self.daily_pnl += pnl
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        for trade in reversed(self.trade_history):
            if trade.symbol == symbol and not trade.closed:
                trade.pnl = pnl
                trade.closed = True
                break
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        del self.active_positions[symbol]
        
        self.logger.info(f"üìâ Closed position: {symbol} | PnL: {pnl:.2f} | Reason: {reason} | Balance: {self.current_balance:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        self._check_emergency_conditions()
    
    def _check_emergency_conditions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–Ω–µ–≤–Ω–æ–π –ø–æ—Ç–µ—Ä–∏
        if self.daily_pnl <= -self.risk_limits.max_daily_loss_usd:
            self._trigger_emergency_stop(f"Daily loss limit hit: {self.daily_pnl:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        drawdown = (self.initial_balance - self.current_balance) / self.initial_balance
        if drawdown >= self.risk_limits.max_drawdown_pct:
            self._trigger_emergency_stop(f"Max drawdown hit: {drawdown:.2%}")
    
    def _trigger_emergency_stop(self, reason: str):
        """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        self.emergency_stop = True
        self.trading_blocked = True
        self.block_reason = f"Emergency stop: {reason}"
        
        self.logger.critical(f"üö® EMERGENCY STOP: {reason}")
        
        if self.on_emergency_stop:
            self.on_emergency_stop(reason, self.active_positions.copy())
    
    def get_risk_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∏—Å–∫–∞–º."""
        total_exposure = self._calculate_total_exposure()
        drawdown = (self.initial_balance - self.current_balance) / self.initial_balance if self.initial_balance > 0 else 0
        
        return {
            'timestamp': datetime.now().isoformat(),
            'trading_status': {
                'blocked': self.trading_blocked,
                'emergency_stop': self.emergency_stop,
                'block_reason': self.block_reason
            },
            'balances': {
                'initial': self.initial_balance,
                'current': self.current_balance,
                'drawdown_pct': drawdown * 100
            },
            'daily_stats': {
                'pnl': self.daily_pnl,
                'trade_count': self.daily_trade_count,
                'hourly_count': self.hourly_trade_count
            },
            'positions': {
                'count': len(self.active_positions),
                'total_exposure': total_exposure,
                'symbols': list(self.active_positions.keys())
            },
            'risk_levels': {
                level.value: len([p for p in self.active_positions.values() if p.risk_level == level])
                for level in RiskLevel
            }
        }
    
    def get_position_details(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º."""
        details = []
        
        for position in self.active_positions.values():
            details.append({
                'symbol': position.symbol,
                'size': position.size,
                'entry_price': position.entry_price,
                'current_price': position.current_price,
                'unrealized_pnl': position.unrealized_pnl,
                'risk_level': position.risk_level.value,
                'stop_loss': position.stop_loss_price,
                'take_profit': position.take_profit_price,
                'pnl_pct': (position.unrealized_pnl / abs(position.size * position.entry_price)) * 100 if position.entry_price != 0 else 0
            })
        
        return details
    
    def set_callbacks(self, **callbacks):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        if 'on_risk_alert' in callbacks:
            self.on_risk_alert = callbacks['on_risk_alert']
        if 'on_stop_loss' in callbacks:
            self.on_stop_loss = callbacks['on_stop_loss']
        if 'on_take_profit' in callbacks:
            self.on_take_profit = callbacks['on_take_profit']
        if 'on_emergency_stop' in callbacks:
            self.on_emergency_stop = callbacks['on_emergency_stop']
    
    def reset_emergency_stop(self, reason: str = "manual_reset"):
        """–°–±—Ä–æ—Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)."""
        self.emergency_stop = False
        self.trading_blocked = False
        self.block_reason = ""
        self.logger.warning(f"‚ö†Ô∏è Emergency stop reset: {reason}")
    
    def adjust_risk_limits(self, new_limits: RiskLimits):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞."""
        old_limits = self.risk_limits
        self.risk_limits = new_limits
        
        self.logger.info(f"üîß Risk limits updated")
        self._log_risk_limits()
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º stop-loss/take-profit –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        for position in self.active_positions.values():
            if position.size > 0:  # Long
                position.stop_loss_price = position.entry_price * (1 - new_limits.stop_loss_pct)
                position.take_profit_price = position.entry_price * (1 + new_limits.take_profit_pct)
            else:  # Short
                position.stop_loss_price = position.entry_price * (1 + new_limits.stop_loss_pct)
                position.take_profit_price = position.entry_price * (1 - new_limits.take_profit_pct)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def example_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    risk_limits = RiskLimits(
        max_position_size_usd=500.0,
        max_total_exposure_usd=2000.0,
        max_daily_loss_usd=200.0,
        stop_loss_pct=0.015,  # 1.5%
        take_profit_pct=0.03,  # 3%
        min_trade_interval_sec=180  # 3 –º–∏–Ω—É—Ç—ã
    )
    
    risk_manager = LiveRiskManager(risk_limits, initial_balance=5000.0)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
    def on_stop_loss(symbol, position):
        print(f"üõë STOP LOSS: Close {symbol} at {position.current_price}")
    
    def on_take_profit(symbol, position):
        print(f"üéØ TAKE PROFIT: Close {symbol} at {position.current_price}")
    
    def on_emergency_stop(reason, positions):
        print(f"üö® EMERGENCY: {reason} | Open positions: {len(positions)}")
    
    risk_manager.set_callbacks(
        on_stop_loss=on_stop_loss,
        on_take_profit=on_take_profit,
        on_emergency_stop=on_emergency_stop
    )
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫
    print("\n=== Testing Trade Validation ===")
    
    # –ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞ - –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏
    action, reason = risk_manager.validate_new_trade("SOLUSDT", "buy", 2.0, 150.0)
    print(f"Trade 1: {action} - {reason}")
    
    if action == RiskAction.ALLOW:
        risk_manager.add_position("SOLUSDT", "buy", 2.0, 150.0)
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É - –¥–æ–ª–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
    action, reason = risk_manager.validate_new_trade("BTCUSDT", "buy", 0.01, 45000.0)
    print(f"Trade 2 (immediate): {action} - {reason}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ stop-loss
    print("\n=== Testing Price Updates ===")
    risk_manager.update_position_prices({"SOLUSDT": 147.0})  # -2% –æ—Ç –≤—Ö–æ–¥–∞
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n=== Risk Summary ===")
    summary = risk_manager.get_risk_summary()
    print(json.dumps(summary, indent=2, default=str))


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    example_usage()