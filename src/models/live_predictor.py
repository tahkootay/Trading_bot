#!/usr/bin/env python3
"""
Live –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –∞–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import asyncio
import pandas as pd
import numpy as np
from typing import Optional, Dict, Any, Callable
import logging
from datetime import datetime, timedelta
import time

from ..feature_engine.live_features import LiveFeatureGenerator, FeatureValidator
from .ensemble_predictor import EnsemblePredictor, ModelPerformanceTracker


class LiveTradingPredictor:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è live –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –∞–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π.
    """
    
    def __init__(self, 
                 models_dir: str = "models/ensemble_live",
                 min_confidence: float = 0.6,
                 prediction_cooldown: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è live –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è.
        
        Args:
            models_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥–µ–ª—è–º–∏
            min_confidence: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            prediction_cooldown: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        """
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.feature_generator = LiveFeatureGenerator(window_size=100)
        self.ensemble_predictor = EnsemblePredictor(models_dir=models_dir)
        self.performance_tracker = ModelPerformanceTracker()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.min_confidence = min_confidence
        self.prediction_cooldown = prediction_cooldown
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_prediction_time = None
        self.last_prediction = None
        self.prediction_history = []
        self.is_ready = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_predictions': 0,
            'buy_signals': 0,
            'sell_signals': 0,
            'strong_signals': 0,
            'weak_signals': 0,
            'errors': 0
        }
        
        # –ö–æ–ª–±—ç–∫–∏
        self.on_prediction_callback: Optional[Callable] = None
        self.on_signal_callback: Optional[Callable] = None
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._check_readiness()
    
    def _check_readiness(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        if self.ensemble_predictor.is_ready():
            self.is_ready = True
            self.logger.info("üéØ Live predictor is ready!")
        else:
            self.is_ready = False
            self.logger.error("‚ùå Live predictor not ready - models not loaded")
    
    def set_prediction_callback(self, callback: Callable[[Dict[str, Any]], None]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
        self.on_prediction_callback = callback
    
    def set_signal_callback(self, callback: Callable[[Dict[str, Any]], None]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–±—ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
        self.on_signal_callback = callback
    
    def _should_make_prediction(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ."""
        if not self.is_ready:
            return False
        
        if self.last_prediction_time is None:
            return True
        
        time_since_last = time.time() - self.last_prediction_time
        return time_since_last >= self.prediction_cooldown
    
    def process_new_data(self, kline_df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
        
        Args:
            kline_df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–ª–∏ None
        """
        if not self._should_make_prediction():
            return None
        
        try:
            # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_df = self.feature_generator.update_data(kline_df)
            if features_df is None:
                self.logger.debug("Insufficient data for feature generation")
                return None
            
            # 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            validation_result = FeatureValidator.validate_features(features_df)
            if not validation_result['valid']:
                self.logger.warning(f"Feature validation failed: {validation_result['issues']}")
                self.stats['errors'] += 1
                return None
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –∞–Ω—Å–∞–º–±–ª—è
            prediction = self.ensemble_predictor.predict_ensemble(features_df)
            if prediction is None:
                self.logger.error("Failed to get ensemble prediction")
                self.stats['errors'] += 1
                return None
            
            # 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            latest_candle = kline_df.iloc[-1] if len(kline_df) > 0 else {}
            feature_summary = self.feature_generator.get_feature_summary()
            
            result = {
                'timestamp': datetime.now(),
                'price': latest_candle.get('close', 0),
                'prediction': prediction,
                'feature_summary': feature_summary,
                'validation': validation_result,
                'is_trading_signal': self._is_trading_signal(prediction)
            }
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(result)
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.last_prediction = result
            self.last_prediction_time = time.time()
            self.prediction_history.append(result)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.prediction_history) > 1000:
                self.prediction_history = self.prediction_history[-1000:]
            
            # 7. –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏
            if self.on_prediction_callback:
                try:
                    self.on_prediction_callback(result)
                except Exception as e:
                    self.logger.error(f"Error in prediction callback: {e}")
            
            if result['is_trading_signal'] and self.on_signal_callback:
                try:
                    self.on_signal_callback(result)
                except Exception as e:
                    self.logger.error(f"Error in signal callback: {e}")
            
            # 8. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._log_prediction(result)
            
            return result
            
        except Exception as e:
            self.logger.error(f"Error processing new data: {e}")
            self.stats['errors'] += 1
            return None
    
    def _is_trading_signal(self, prediction: Dict[str, Any]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º."""
        final_prob = prediction.get('final_probability', 0.5)
        
        # –°–∏–≥–Ω–∞–ª BUY –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å > min_confidence
        # –°–∏–≥–Ω–∞–ª SELL –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å < (1 - min_confidence)
        return (
            final_prob >= self.min_confidence or 
            final_prob <= (1 - self.min_confidence)
        )
    
    def _update_stats(self, result: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stats['total_predictions'] += 1
        
        prediction = result['prediction']
        final_signal = prediction.get('final_signal', 0)
        strength = prediction.get('signal_strength', 'WEAK')
        
        if final_signal == 1:
            self.stats['buy_signals'] += 1
        else:
            self.stats['sell_signals'] += 1
        
        if strength == 'STRONG':
            self.stats['strong_signals'] += 1
        else:
            self.stats['weak_signals'] += 1
    
    def _log_prediction(self, result: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
        prediction = result['prediction']
        price = result.get('price', 0)
        
        signal = "BUY" if prediction['final_signal'] == 1 else "SELL/HOLD"
        prob = prediction['final_probability']
        strength = prediction['signal_strength']
        is_signal = result['is_trading_signal']
        
        log_msg = (
            f"üéØ Prediction: {signal} | "
            f"Price: {price:.4f} | "
            f"Prob: {prob:.3f} | "
            f"Strength: {strength} | "
            f"Trading Signal: {'‚úÖ' if is_signal else '‚ùå'}"
        )
        
        if is_signal:
            self.logger.info(log_msg)
        else:
            self.logger.debug(log_msg)
    
    def get_latest_prediction(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
        return self.last_prediction
    
    def get_trading_signals_history(self, limit: int = 50) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
        trading_signals = [
            pred for pred in self.prediction_history[-limit:]
            if pred.get('is_trading_signal', False)
        ]
        return trading_signals
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è."""
        stats = self.stats.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if self.stats['total_predictions'] > 0:
            stats['buy_signal_rate'] = self.stats['buy_signals'] / self.stats['total_predictions']
            stats['strong_signal_rate'] = self.stats['strong_signals'] / self.stats['total_predictions']
            stats['error_rate'] = self.stats['errors'] / self.stats['total_predictions']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        stats['is_ready'] = self.is_ready
        stats['models_info'] = self.ensemble_predictor.get_models_info()
        stats['last_prediction_time'] = self.last_prediction_time
        
        return stats
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stats = {
            'total_predictions': 0,
            'buy_signals': 0,
            'sell_signals': 0,
            'strong_signals': 0,
            'weak_signals': 0,
            'errors': 0
        }
        self.logger.info("Statistics reset")
    
    def get_prediction_summary(self, result: Optional[Dict[str, Any]] = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é."""
        if result is None:
            result = self.last_prediction
        
        if result is None:
            return "No predictions available"
        
        prediction = result['prediction']
        return self.ensemble_predictor.get_prediction_summary(prediction)


class AsyncLivePredictor:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è live –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è."""
    
    def __init__(self, predictor: LiveTradingPredictor):
        self.predictor = predictor
        self.logger = logging.getLogger(__name__)
    
    async def process_data_async(self, kline_df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        loop = asyncio.get_event_loop()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ executor —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            result = await loop.run_in_executor(
                None, self.predictor.process_new_data, kline_df
            )
            return result
        except Exception as e:
            self.logger.error(f"Error in async prediction: {e}")
            return None


# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebSocket
async def websocket_prediction_example():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è —Å WebSocket."""
    from ..data_collector.websocket_client import BybitWebSocketClient
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å
    predictor = LiveTradingPredictor()
    
    if not predictor.is_ready:
        print("‚ùå Predictor not ready")
        return
    
    # –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    def on_prediction(result):
        summary = predictor.get_prediction_summary(result)
        print(f"üìä Prediction: {summary}")
    
    def on_trading_signal(result):
        summary = predictor.get_prediction_summary(result)
        print(f"üö® TRADING SIGNAL: {summary}")
    
    predictor.set_prediction_callback(on_prediction)
    predictor.set_signal_callback(on_trading_signal)
    
    # –ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket
    def on_kline_data(df: pd.DataFrame):
        result = predictor.process_new_data(df)
        # result –º–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –¥–µ–ª–∞–ª–æ—Å—å
    
    # –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
    ws_client = BybitWebSocketClient(symbol="SOLUSDT", timeframe="5")
    ws_client.set_kline_callback(on_kline_data)
    
    try:
        print("üöÄ Starting live prediction with WebSocket...")
        await ws_client.connect()
    except KeyboardInterrupt:
        print("üõë Stopping...")
    finally:
        await ws_client.disconnect()
        
        # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = predictor.get_stats()
        print(f"\nüìà Final Stats: {stats}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(websocket_prediction_example())