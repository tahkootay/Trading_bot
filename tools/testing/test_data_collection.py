#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import requests
import json
import time

def test_data_collection_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    base_url = "http://localhost:8080"
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –°–±–æ—Ä–∞ –î–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # Test 1: Basic API access
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API...")
    try:
        response = requests.get(f"{base_url}/api/dashboard", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False
    
    # Test 2: Web interface with data collection
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é...")
    try:
        response = requests.get(base_url, timeout=5)
        if response.status_code == 200 and '–°–±–æ—Ä –î–∞–Ω–Ω—ã—Ö' in response.text:
            print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: {e}")
    
    # Test 3: Data collection API endpoints
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # Test collection history endpoint (should work even if empty)
    try:
        response = requests.get(f"{base_url}/api/data-collection/history", timeout=5)
        if response.status_code == 200:
            history = response.json()
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {len(history)} –∑–∞–ø–∏—Å–µ–π")
        else:
            print(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    # Test 4: Mock data collection start
    print("\n‚ñ∂Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    collection_data = {
        "symbol": "SOLUSDT",
        "start_date": "2025-08-22T10:00",
        "end_date": "2025-08-22T11:00", 
        "timeframes": ["1m", "5m"],
        "dataset_name": "test_collection"
    }
    
    try:
        response = requests.post(
            f"{base_url}/api/data-collection/start",
            json=collection_data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            process_id = result.get('process_id')
            print(f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω: {process_id}")
            
            # Test status monitoring
            print("\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            for i in range(5):  # Check status 5 times
                time.sleep(2)
                try:
                    status_response = requests.get(
                        f"{base_url}/api/data-collection/{process_id}/status",
                        timeout=5
                    )
                    
                    if status_response.status_code == 200:
                        status = status_response.json()
                        progress = status.get('progress', 0)
                        message = status.get('message', 'N/A')
                        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% - {message}")
                        
                        if status.get('status') == 'completed':
                            print("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                            
                            # Show results
                            if status.get('results'):
                                results = status['results']
                                print(f"   üìà –°–∏–º–≤–æ–ª: {results.get('symbol', 'N/A')}")
                                print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {results.get('period', 'N/A')}")
                                print(f"   üìä –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(results.get('timeframes', []))}")
                                print(f"   üïØÔ∏è –°–≤–µ—á–µ–π: {results.get('candles_collected', 0)}")
                                if 'collection_time' in results:
                                    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {results['collection_time']:.1f}s")
                            break
                        elif status.get('status') == 'failed':
                            print(f"‚ùå –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {status.get('error', 'Unknown')}")
                            break
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞: {response.status_code}")
            if response.text:
                print(f"   –î–µ—Ç–∞–ª–∏: {response.text}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–°–±–æ—Ä –î–∞–Ω–Ω—ã—Ö'")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã")
    print("4. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –°–±–æ—Ä –î–∞–Ω–Ω—ã—Ö'")
    print("5. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    return True

if __name__ == "__main__":
    test_data_collection_api()