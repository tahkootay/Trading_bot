#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö SOL/USDT —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import requests
import pandas as pd
from datetime import datetime, timedelta
import time
import json
from pathlib import Path
import click

def collect_bybit_data(symbol: str, interval: str, days: int, output_dir: str = "data"):
    """
    –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–µ API Bybit
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä SOLUSDT)
        interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (1, 5, 15, 60, 240, D)
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        output_dir: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    interval_map = {
        "1m": "1",
        "5m": "5", 
        "15m": "15",
        "1h": "60",
        "4h": "240",
        "1d": "D"
    }
    
    bybit_interval = interval_map.get(interval, interval)
    
    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
    end_time = datetime.now()
    start_time = end_time - timedelta(days=days)
    
    # Bybit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã
    start_timestamp = int(start_time.timestamp())
    end_timestamp = int(end_time.timestamp())
    
    print(f"üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö {symbol} ({interval}) –∑–∞ {days} –¥–Ω–µ–π...")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_time.strftime('%Y-%m-%d')} - {end_time.strftime('%Y-%m-%d')}")
    
    all_candles = []
    current_start = start_timestamp
    
    # URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API Bybit
    base_url = "https://api.bybit.com/v5/market/kline"
    
    while current_start < end_timestamp:
        try:
            params = {
                'category': 'spot',  # –∏–ª–∏ 'linear' –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                'symbol': symbol,
                'interval': bybit_interval,
                'start': current_start * 1000,  # Bybit –æ–∂–∏–¥–∞–µ—Ç –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                'end': end_timestamp * 1000,
                'limit': 1000
            }
            
            print(f"üîÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å {datetime.fromtimestamp(current_start)}...")
            
            response = requests.get(base_url, params=params, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            
            if data['retCode'] != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data['retMsg']}")
                break
            
            candles = data['result']['list']
            
            if not candles:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                break
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            processed_candles = []
            for candle in candles:
                # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [timestamp, open, high, low, close, volume, turnover]
                processed_candles.append({
                    'timestamp': datetime.fromtimestamp(int(candle[0]) / 1000),
                    'open': float(candle[1]),
                    'high': float(candle[2]), 
                    'low': float(candle[3]),
                    'close': float(candle[4]),
                    'volume': float(candle[5]),
                    'turnover': float(candle[6]) if len(candle) > 6 else 0
                })
            
            all_candles.extend(processed_candles)
            print(f"üìà –°–æ–±—Ä–∞–Ω–æ {len(processed_candles)} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ: {len(all_candles)})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if processed_candles:
                last_time = processed_candles[-1]['timestamp']
                current_start = int(last_time.timestamp()) + 1
            else:
                break
                
            # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
            time.sleep(0.1)
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            time.sleep(5)  # –ë–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            continue
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
    
    if all_candles:
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df = pd.DataFrame(all_candles)
        df = df.sort_values('timestamp')
        df = df.drop_duplicates(subset=['timestamp'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        Path(output_dir).mkdir(exist_ok=True)
        filename = f"{symbol}_{interval}_180d_{datetime.now().strftime('%Y%m%d')}.csv"
        filepath = Path(output_dir) / filename
        
        df.to_csv(filepath, index=False)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –≤ {filepath}")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "symbol": symbol,
            "interval": interval,
            "collection_date": datetime.now().isoformat(),
            "days_collected": days,
            "total_candles": len(df),
            "date_range": {
                "start": df['timestamp'].min().isoformat(),
                "end": df['timestamp'].max().isoformat()
            },
            "data_source": "bybit_public_api",
            "filename": filename
        }
        
        metadata_file = Path(output_dir) / f"{symbol}_{interval}_metadata.json"
        with open(metadata_file, 'w') as f:
            json.dump(metadata, f, indent=2)
            
        return len(df)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return 0

@click.command()
@click.option('--symbol', '-s', default='SOLUSDT', help='Trading pair symbol')
@click.option('--days', '-d', default=180, help='Days to collect')
@click.option('--output-dir', '-o', default='data', help='Output directory')
def main(symbol, days, output_dir):
    """–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
    
    print(f"üöÄ –ü—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö Bybit")
    print(f"üìä –°–∏–º–≤–æ–ª: {symbol}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
    print(f"üìÅ –ü–∞–ø–∫–∞: {output_dir}")
    print()
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è ML
    intervals = ['5m', '15m', '1h']  # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
    
    total_candles = 0
    successful_intervals = 0
    
    for interval in intervals:
        try:
            candles = collect_bybit_data(symbol, interval, days, output_dir)
            if candles > 0:
                total_candles += candles
                successful_intervals += 1
            print()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {interval}: {e}")
            print()
    
    print("="*50)
    print(f"üéâ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {successful_intervals} –∏–∑ {len(intervals)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
    print(f"üìä –û–±—â–∏–π –æ–±—ä–µ–º: {total_candles:,} —Å–≤–µ—á–µ–π")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {Path(output_dir).absolute()}")
    
    if total_candles >= 50000:
        print("üéØ –û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ ML –æ–±—É—á–µ–Ω–∏—è")
    elif total_candles >= 25000:
        print("üëç –•–æ—Ä–æ—à–æ! –î–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ ML –æ–±—É—á–µ–Ω–∏—è") 
    else:
        print("‚ö†Ô∏è  –î–∞–Ω–Ω—ã—Ö –º–∞–ª–æ–≤–∞—Ç–æ, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")

if __name__ == "__main__":
    main()