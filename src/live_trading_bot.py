#!/usr/bin/env python3
"""
Live –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç —Å –∞–Ω—Å–∞–º–±–ª–µ–º ML-–º–æ–¥–µ–ª–µ–π –¥–ª—è Bybit Futures
–°–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ /Users/alexey/Documents/4–º–æ–¥–µ–ª–∏.md

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- WebSocket –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –ª–µ—Ç—É (MA, RSI, MACD, Bollinger Bands, Volume change)
- –ê–Ω—Å–∞–º–±–ª—å –∏–∑ 4 –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π (RF, LightGBM, XGBoost, CatBoost)
- –ú–µ—Ç–∞–º–æ–¥–µ–ª—å (Logistic Regression) –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- –¢–æ—Ä–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫ Bybit API
- –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Å stop-loss, max exposure, –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
"""

import asyncio
import logging
import signal
import sys
import json
import time
from datetime import datetime
from typing import Dict, Any, Optional
from dataclasses import dataclass
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from .data_collector.websocket_client import BybitWebSocketClient, LiveDataManager
from .feature_engine.live_features import LiveFeatureGenerator
from .models.live_predictor import LiveTradingPredictor
from .execution.live_bybit_executor import BybitLiveExecutor
from .risk_manager.live_risk_manager import LiveRiskManager, RiskLimits, RiskAction
from .utils.logger import setup_logger


@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞."""
    # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    symbol: str = "SOL/USDT:USDT"
    timeframe: str = "5"  # 5 –º–∏–Ω—É—Ç
    
    # API –∫–ª—é—á–∏ Bybit
    bybit_api_key: str = ""
    bybit_api_secret: str = ""
    bybit_testnet: bool = True
    
    # ML –º–æ–¥–µ–ª–∏
    models_dir: str = "models/ensemble_live"
    min_confidence: float = 0.65  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    prediction_cooldown: int = 60  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    
    # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    max_position_size_usd: float = 100.0
    max_total_exposure_usd: float = 500.0
    max_daily_loss_usd: float = 50.0
    stop_loss_pct: float = 0.02
    take_profit_pct: float = 0.04
    min_trade_interval_sec: int = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    initial_balance: float = 1000.0
    dry_run: bool = True  # –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏
    log_level: str = "INFO"


class LiveTradingBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å live —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    
    def __init__(self, config: BotConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
        """
        self.config = config
        self.running = False
        self.start_time = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = setup_logger("LiveTradingBot", config.log_level)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.stats = {
            'uptime': 0,
            'total_predictions': 0,
            'trading_signals': 0,
            'successful_trades': 0,
            'failed_trades': 0,
            'current_balance': config.initial_balance,
            'daily_pnl': 0.0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()
        
        self.logger.info("ü§ñ Live Trading Bot initialized")
        self._log_configuration()
    
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞."""
        try:
            # 1. WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.ws_client = BybitWebSocketClient(
                symbol=self.config.symbol.replace("/", "").replace(":USDT", ""),
                timeframe=self.config.timeframe
            )
            
            # 2. Live –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å (–≤–∫–ª—é—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –∞–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π)
            self.predictor = LiveTradingPredictor(
                models_dir=self.config.models_dir,
                min_confidence=self.config.min_confidence,
                prediction_cooldown=self.config.prediction_cooldown
            )
            
            # 3. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤ Bybit
            if not self.config.dry_run:
                self.executor = BybitLiveExecutor(
                    api_key=self.config.bybit_api_key,
                    api_secret=self.config.bybit_api_secret,
                    testnet=self.config.bybit_testnet
                )
            else:
                self.executor = None
                self.logger.info("üîÑ Running in DRY RUN mode - no real trades")
            
            # 4. –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            risk_limits = RiskLimits(
                max_position_size_usd=self.config.max_position_size_usd,
                max_total_exposure_usd=self.config.max_total_exposure_usd,
                max_daily_loss_usd=self.config.max_daily_loss_usd,
                stop_loss_pct=self.config.stop_loss_pct,
                take_profit_pct=self.config.take_profit_pct,
                min_trade_interval_sec=self.config.min_trade_interval_sec
            )
            
            self.risk_manager = LiveRiskManager(
                risk_limits=risk_limits,
                initial_balance=self.config.initial_balance
            )
            
            self.logger.info("‚úÖ All components initialized successfully")
            
        except Exception as e:
            self.logger.error(f"Failed to initialize components: {e}")
            raise
    
    def _log_configuration(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞."""
        config_info = {
            'symbol': self.config.symbol,
            'timeframe': f"{self.config.timeframe}m",
            'dry_run': self.config.dry_run,
            'testnet': self.config.bybit_testnet if not self.config.dry_run else "N/A",
            'min_confidence': self.config.min_confidence,
            'max_position_usd': self.config.max_position_size_usd,
            'max_daily_loss_usd': self.config.max_daily_loss_usd
        }
        self.logger.info(f"üìã Bot Configuration: {config_info}")
    
    def _setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏."""
        
        # –ö–æ–ª–±—ç–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket
        def on_kline_data(df):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                prediction_result = self.predictor.process_new_data(df)
                
                if prediction_result and prediction_result.get('is_trading_signal', False):
                    self.stats['trading_signals'] += 1
                    asyncio.create_task(self._handle_trading_signal(prediction_result, df))
                
                if prediction_result:
                    self.stats['total_predictions'] += 1
                
            except Exception as e:
                self.logger.error(f"Error processing kline data: {e}")
        
        self.ws_client.set_kline_callback(on_kline_data)
        
        # –ö–æ–ª–±—ç–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        def on_stop_loss(symbol, position):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è stop-loss."""
            self.logger.warning(f"üõë STOP LOSS triggered for {symbol}")
            asyncio.create_task(self._execute_stop_loss(symbol, position))
        
        def on_take_profit(symbol, position):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è take-profit."""
            self.logger.info(f"üéØ TAKE PROFIT triggered for {symbol}")
            asyncio.create_task(self._execute_take_profit(symbol, position))
        
        def on_emergency_stop(reason, positions):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
            self.logger.critical(f"üö® EMERGENCY STOP: {reason}")
            asyncio.create_task(self._handle_emergency_stop(reason, positions))
        
        self.risk_manager.set_callbacks(
            on_stop_loss=on_stop_loss,
            on_take_profit=on_take_profit,
            on_emergency_stop=on_emergency_stop
        )
    
    async def _handle_trading_signal(self, prediction_result: Dict[str, Any], market_data):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.
        
        Args:
            prediction_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            prediction = prediction_result['prediction']
            current_price = prediction_result.get('price', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            signal = prediction['final_signal']  # 1 = BUY, 0 = SELL/HOLD
            probability = prediction['final_probability']
            
            if signal != 1 or probability < self.config.min_confidence:
                self.logger.debug(f"Signal ignored: signal={signal}, prob={probability:.3f}")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
            position_size_usd = min(
                self.config.max_position_size_usd,
                self.risk_manager.current_balance * 0.1  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            )
            
            if current_price > 0:
                position_size = position_size_usd / current_price
            else:
                self.logger.error("Invalid current price for position sizing")
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            risk_action, risk_reason = self.risk_manager.validate_new_trade(
                symbol=self.config.symbol,
                side='buy',
                size=position_size,
                price=current_price
            )
            
            if risk_action == RiskAction.BLOCK:
                self.logger.warning(f"üö´ Trade blocked by risk manager: {risk_reason}")
                return
            
            elif risk_action == RiskAction.REDUCE_SIZE:
                self.logger.info(f"‚ö†Ô∏è Position size reduced: {risk_reason}")
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                if "suggested:" in risk_reason:
                    try:
                        suggested_size = float(risk_reason.split("suggested:")[1].strip())
                        position_size = suggested_size
                    except:
                        position_size *= 0.5  # –£–º–µ–Ω—å—à–∞–µ–º –≤ 2 —Ä–∞–∑–∞ –∫–∞–∫ fallback
            
            # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
            await self._execute_trade({
                'symbol': self.config.symbol,
                'side': 'buy',
                'size': position_size,
                'price': current_price,
                'prediction': prediction_result,
                'risk_validated': True
            })
            
        except Exception as e:
            self.logger.error(f"Error handling trading signal: {e}")
    
    async def _execute_trade(self, trade_params: Dict[str, Any]):
        """
        –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–¥–µ–ª–∫–∏.
        
        Args:
            trade_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
        """
        try:
            symbol = trade_params['symbol']
            side = trade_params['side']
            size = trade_params['size']
            price = trade_params['price']
            
            self.logger.info(f"üéØ Executing trade: {side} {size:.4f} {symbol} @ {price:.4f}")
            
            if self.config.dry_run:
                # –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏
                await self._simulate_trade(trade_params)
            else:
                # –†–µ–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ —á–µ—Ä–µ–∑ Bybit
                if not self.executor or not self.executor.is_connected():
                    self.logger.error("Executor not available for real trading")
                    self.stats['failed_trades'] += 1
                    return
                
                # –ò—Å–ø–æ–ª–Ω—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
                result = await self.executor.execute_limit_order(
                    symbol=symbol,
                    side=side,
                    amount=size,
                    price=price * 1.001 if side == 'buy' else price * 0.999  # –ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ü–µ–Ω—ã
                )
                
                if result and result.status in ['FILLED', 'PARTIALLY_FILLED']:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
                    self.risk_manager.add_position(
                        symbol=symbol,
                        side=side,
                        size=result.filled_size,
                        entry_price=result.avg_price
                    )
                    
                    self.stats['successful_trades'] += 1
                    self.logger.info(f"‚úÖ Trade executed successfully: {result.order_id}")
                else:
                    self.stats['failed_trades'] += 1
                    self.logger.error(f"‚ùå Trade execution failed")
            
        except Exception as e:
            self.logger.error(f"Error executing trade: {e}")
            self.stats['failed_trades'] += 1
    
    async def _simulate_trade(self, trade_params: Dict[str, Any]):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏ –≤ dry run —Ä–µ–∂–∏–º–µ."""
        try:
            symbol = trade_params['symbol']
            side = trade_params['side']
            size = trade_params['size']
            price = trade_params['price']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            success = self.risk_manager.add_position(
                symbol=symbol,
                side=side,
                size=size,
                entry_price=price
            )
            
            if success:
                self.stats['successful_trades'] += 1
                self.logger.info(f"‚úÖ [SIMULATION] Trade executed: {side} {size:.4f} {symbol} @ {price:.4f}")
            else:
                self.stats['failed_trades'] += 1
                self.logger.error(f"‚ùå [SIMULATION] Trade simulation failed")
            
        except Exception as e:
            self.logger.error(f"Error in trade simulation: {e}")
    
    async def _execute_stop_loss(self, symbol: str, position):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ stop-loss."""
        try:
            if self.config.dry_run:
                # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
                self.risk_manager.close_position(
                    symbol=symbol,
                    close_price=position.current_price,
                    reason="stop_loss_simulation"
                )
                self.logger.info(f"‚úÖ [SIMULATION] Stop-loss executed for {symbol}")
            else:
                # –†–µ–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if self.executor:
                    result = await self.executor.close_position(symbol)
                    if result:
                        self.risk_manager.close_position(
                            symbol=symbol,
                            close_price=result.avg_price,
                            reason="stop_loss"
                        )
        
        except Exception as e:
            self.logger.error(f"Error executing stop-loss: {e}")
    
    async def _execute_take_profit(self, symbol: str, position):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ take-profit."""
        try:
            if self.config.dry_run:
                # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
                self.risk_manager.close_position(
                    symbol=symbol,
                    close_price=position.current_price,
                    reason="take_profit_simulation"
                )
                self.logger.info(f"‚úÖ [SIMULATION] Take-profit executed for {symbol}")
            else:
                # –†–µ–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if self.executor:
                    result = await self.executor.close_position(symbol)
                    if result:
                        self.risk_manager.close_position(
                            symbol=symbol,
                            close_price=result.avg_price,
                            reason="take_profit"
                        )
        
        except Exception as e:
            self.logger.error(f"Error executing take-profit: {e}")
    
    async def _handle_emergency_stop(self, reason: str, positions: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        try:
            self.logger.critical(f"üö® EMERGENCY STOP ACTIVATED: {reason}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            for symbol, position in positions.items():
                if self.config.dry_run:
                    self.risk_manager.close_position(
                        symbol=symbol,
                        close_price=position.current_price,
                        reason="emergency_stop_simulation"
                    )
                else:
                    if self.executor:
                        await self.executor.close_position(symbol)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            self.logger.critical("üõë Bot shutting down due to emergency stop")
            await self.stop()
            
        except Exception as e:
            self.logger.error(f"Error handling emergency stop: {e}")
    
    async def _monitor_positions(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω."""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                current_price = self.ws_client.get_latest_price()
                
                if current_price and self.config.symbol in self.risk_manager.active_positions:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–π
                    price_updates = {self.config.symbol: current_price}
                    self.risk_manager.update_position_prices(price_updates)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats()
                
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                self.logger.error(f"Error in position monitoring: {e}")
                await asyncio.sleep(10)
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞."""
        if self.start_time:
            self.stats['uptime'] = int((datetime.now() - self.start_time).total_seconds())
        
        self.stats['current_balance'] = self.risk_manager.current_balance
        self.stats['daily_pnl'] = self.risk_manager.daily_pnl
        self.stats['active_positions'] = len(self.risk_manager.active_positions)
    
    async def _status_reporter(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ."""
        while self.running:
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
                
                if self.running:
                    self._log_status()
                
            except Exception as e:
                self.logger.error(f"Error in status reporting: {e}")
    
    def _log_status(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞."""
        risk_summary = self.risk_manager.get_risk_summary()
        predictor_stats = self.predictor.get_stats()
        
        status = {
            'uptime_minutes': self.stats['uptime'] // 60,
            'total_predictions': self.stats['total_predictions'],
            'trading_signals': self.stats['trading_signals'],
            'successful_trades': self.stats['successful_trades'],
            'failed_trades': self.stats['failed_trades'],
            'current_balance': f"{self.stats['current_balance']:.2f}",
            'daily_pnl': f"{self.stats['daily_pnl']:.2f}",
            'active_positions': len(self.risk_manager.active_positions),
            'trading_blocked': risk_summary['trading_status']['blocked']
        }
        
        self.logger.info(f"üìä Bot Status: {status}")
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
        def signal_handler(signum, frame):
            self.logger.info(f"Received signal {signum}, shutting down gracefully...")
            asyncio.create_task(self.stop())
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            if self.running:
                self.logger.warning("Bot is already running")
                return
            
            self.logger.info("üöÄ Starting Live Trading Bot...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self.predictor.is_ready:
                self.logger.error("‚ùå Predictor not ready - models not loaded")
                return
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
            self._setup_callbacks()
            self._setup_signal_handlers()
            
            # –ó–∞–ø—É—Å–∫
            self.running = True
            self.start_time = datetime.now()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            tasks = [
                asyncio.create_task(self.ws_client.connect()),
                asyncio.create_task(self._monitor_positions()),
                asyncio.create_task(self._status_reporter())
            ]
            
            self.logger.info("‚úÖ Live Trading Bot started successfully!")
            self.logger.info("=" * 60)
            self.logger.info("üéØ Bot is now actively trading according to ML predictions")
            self.logger.info("üõ°Ô∏è Risk management is active")
            self.logger.info("üìä Use Ctrl+C to stop gracefully")
            self.logger.info("=" * 60)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            self.logger.error(f"Error starting bot: {e}")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        if not self.running:
            return
        
        self.logger.info("üõë Stopping Live Trading Bot...")
        
        try:
            self.running = False
            
            # –û—Ç–∫–ª—é—á–∞–µ–º WebSocket
            if hasattr(self, 'ws_client'):
                await self.ws_client.disconnect()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ (–≤ dry run –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º)
            active_positions = list(self.risk_manager.active_positions.keys())
            for symbol in active_positions:
                position = self.risk_manager.active_positions[symbol]
                if self.config.dry_run:
                    self.risk_manager.close_position(
                        symbol=symbol,
                        close_price=position.current_price,
                        reason="bot_shutdown_simulation"
                    )
                else:
                    if hasattr(self, 'executor') and self.executor:
                        await self.executor.close_position(symbol)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self._log_final_stats()
            
            self.logger.info("‚úÖ Bot stopped successfully")
            
        except Exception as e:
            self.logger.error(f"Error stopping bot: {e}")
    
    def _log_final_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        total_time = (datetime.now() - self.start_time).total_seconds() if self.start_time else 0
        
        final_stats = {
            'session_duration_minutes': int(total_time // 60),
            'total_predictions': self.stats['total_predictions'],
            'trading_signals_generated': self.stats['trading_signals'],
            'successful_trades': self.stats['successful_trades'],
            'failed_trades': self.stats['failed_trades'],
            'final_balance': f"{self.risk_manager.current_balance:.2f}",
            'session_pnl': f"{self.risk_manager.current_balance - self.config.initial_balance:.2f}",
            'success_rate': f"{(self.stats['successful_trades'] / max(1, self.stats['successful_trades'] + self.stats['failed_trades'])) * 100:.1f}%"
        }
        
        self.logger.info("=" * 60)
        self.logger.info("üìä FINAL SESSION STATS")
        self.logger.info("=" * 60)
        for key, value in final_stats.items():
            self.logger.info(f"{key}: {value}")
        self.logger.info("=" * 60)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞)
    config = BotConfig(
        symbol="SOL/USDT:USDT",
        timeframe="5",
        
        # API –∫–ª—é—á–∏ (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏)
        bybit_api_key="",  # –í–∞—à API –∫–ª—é—á
        bybit_api_secret="",  # –í–∞—à API —Å–µ–∫—Ä–µ—Ç
        bybit_testnet=True,
        
        # –ú–æ–¥–µ–ª–∏
        models_dir="models/ensemble_live",
        min_confidence=0.65,
        
        # –†–∏—Å–∫–∏
        max_position_size_usd=50.0,  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª—ã—Ö —Å—É–º–º
        max_total_exposure_usd=200.0,
        max_daily_loss_usd=25.0,
        
        # –†–µ–∂–∏–º
        dry_run=True,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        initial_balance=1000.0,
        log_level="INFO"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = LiveTradingBot(config)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Keyboard interrupt received")
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
    finally:
        await bot.stop()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ Starting Live Crypto Trading Bot...")
    print("üîÑ Press Ctrl+C to stop gracefully")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")