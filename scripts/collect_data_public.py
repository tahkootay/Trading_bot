#!/usr/bin/env python3
"""–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API Bybit."""

import asyncio
import sys
from datetime import datetime, timedelta
from pathlib import Path
import pandas as pd
import numpy as np
import click
import json
import aiohttp

# Add src to path
src_path = str(Path(__file__).parent.parent / "src")
sys.path.insert(0, src_path)

try:
    from src.utils.types import TimeFrame
    from src.utils.logger import setup_logging, TradingLogger
except ImportError:
    # Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Python 3.9
    sys.path.insert(0, str(Path(__file__).parent.parent))
    from src.utils.types import TimeFrame
    from src.utils.logger import setup_logging, TradingLogger


class PublicDataCollector:
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API Bybit."""
    
    def __init__(self):
        self.logger = TradingLogger("public_data_collector")
        self.base_url = "https://api.bybit.com"
    
    def _get_interval_code(self, timeframe: TimeFrame) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TimeFrame –≤ –∫–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è Bybit API."""
        interval_map = {
            TimeFrame.M1: "1",      # 1 –º–∏–Ω—É—Ç–∞
            TimeFrame.M3: "3",      # 3 –º–∏–Ω—É—Ç—ã
            TimeFrame.M5: "5",      # 5 –º–∏–Ω—É—Ç
            TimeFrame.M15: "15",    # 15 –º–∏–Ω—É—Ç
            TimeFrame.M30: "30",    # 30 –º–∏–Ω—É—Ç
            TimeFrame.H1: "60",     # 1 —á–∞—Å
            TimeFrame.H4: "240",    # 4 —á–∞—Å–∞
            TimeFrame.D1: "D",      # 1 –¥–µ–Ω—å
        }
        return interval_map.get(timeframe, "1")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞
        
    async def collect_historical_data(
        self,
        symbol: str,
        timeframes: list,
        days: int = 30,
        output_dir: str = "data",
    ) -> dict:
        """–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API."""
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        processed_dir = Path(output_dir) / "processed"
        processed_dir.mkdir(parents=True, exist_ok=True)
        
        collected_data = {}
        
        print(f"üöÄ –ü—É–±–ª–∏—á–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        print(f"‚è±Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º—ã: {', '.join(timeframes)}")
        print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {processed_dir}")
        print()
        
        async with aiohttp.ClientSession() as session:
            for timeframe_str in timeframes:
                try:
                    timeframe = TimeFrame(timeframe_str)
                    print(f"üìä –°–±–æ—Ä {timeframe.value} –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
                    print(f"    üîç TimeFrame: {timeframe}, value: {timeframe.value}, interval_code: {self._get_interval_code(timeframe)}")
                    
                    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    end_time = datetime.now()
                    start_time = end_time - timedelta(days=days)
                    
                    print(f"    üîç –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {start_time} -> {end_time}")
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    all_candles = []
                    try:
                        url = f"{self.base_url}/v5/market/kline"
                        params = {
                            "category": "linear",
                            "symbol": symbol,
                            "interval": self._get_interval_code(timeframe),
                            "limit": 1000,  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
                        }
                        
                        print(f"    üì° –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)")
                        
                        async with session.get(url, params=params) as response:
                            if response.status != 200:
                                print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                                continue
                            
                            data = await response.json()
                            
                            if data.get("retCode") != 0:
                                print(f"    ‚ùå API –æ—à–∏–±–∫–∞: {data.get('retMsg')}")
                                continue
                            
                            klines = data.get("result", {}).get("list", [])
                            
                            if klines:
                                print(f"    üìà –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Ç–µ–∫—É—â–∏—Ö —Å–≤–µ—á–µ–π")
                                
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                                for kline in klines:
                                    candle_data = {
                                        'timestamp': datetime.fromtimestamp(int(kline[0]) / 1000),
                                        'open': float(kline[1]),
                                        'high': float(kline[2]),
                                        'low': float(kline[3]),
                                        'close': float(kline[4]),
                                        'volume': float(kline[5]),
                                    }
                                    all_candles.append(candle_data)
                                
                                print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {len(all_candles)} —Å–≤–µ—á–µ–π")
                            else:
                                print(f"    ‚ö†Ô∏è  –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
                    
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
                    if not all_candles:
                        print(f"    üîÑ –ü—Ä–æ–±—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏...")
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                        start_timestamp = int(start_time.timestamp() * 1000)
                        end_timestamp = int(end_time.timestamp() * 1000)
                        current_start = start_timestamp
                        
                        while current_start < end_timestamp:
                            try:
                                url = f"{self.base_url}/v5/market/kline"
                                params = {
                                    "category": "linear",
                                    "symbol": symbol,
                                    "interval": self._get_interval_code(timeframe),
                                    "start": current_start,
                                    "end": end_timestamp,
                                    "limit": 1000,
                                }
                                
                                print(f"    üì° –ó–∞–ø—Ä–æ—Å: {current_start} -> {end_timestamp}")
                                
                                async with session.get(url, params=params) as response:
                                    if response.status != 200:
                                        print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                                        break
                                    
                                    data = await response.json()
                                    
                                    if data.get("retCode") != 0:
                                        print(f"    ‚ùå API –æ—à–∏–±–∫–∞: {data.get('retMsg')}")
                                        break
                                    
                                    klines = data.get("result", {}).get("list", [])
                                    
                                    if not klines:
                                        print(f"    ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                                        break
                                    
                                    print(f"    üìà –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π")
                                    
                                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                                    for kline in klines:
                                        candle_data = {
                                            'timestamp': datetime.fromtimestamp(int(kline[0]) / 1000),
                                            'open': float(kline[1]),
                                            'high': float(kline[2]),
                                            'low': float(kline[3]),
                                            'close': float(kline[4]),
                                            'volume': float(kline[5]),
                                        }
                                        all_candles.append(candle_data)
                                    
                                    # –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                                    if klines:
                                        last_candle_time = int(klines[-1][0])
                                        current_start = last_candle_time + 1
                                        print(f"    üîÑ –°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç: {current_start}")
                                    
                                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                                    await asyncio.sleep(0.1)
                                    
                            except Exception as e:
                                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                                await asyncio.sleep(1)
                                break
                    
                    if all_candles:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ DataFrame
                        df = pd.DataFrame(all_candles)
                        df.set_index('timestamp', inplace=True)
                        df.sort_index(inplace=True)
                        
                        # –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
                        df = df[~df.index.duplicated(keep='last')]
                        
                        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
                        filename = processed_dir / f"{symbol}_{timeframe.value}_{days}d_public.csv"
                        df.to_csv(filename)
                        
                        collected_data[timeframe] = df
                        
                        print(f"    ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –≤ {filename}")
                        
                        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
                        if len(df) > 0:
                            start_date = df.index[0].strftime("%Y-%m-%d %H:%M")
                            end_date = df.index[-1].strftime("%Y-%m-%d %H:%M")
                            print(f"    üìÖ –î–∏–∞–ø–∞–∑–æ–Ω: {start_date} ‚Üí {end_date}")
                    else:
                        print(f"    ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe.value}")
                    
                    print()
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ {timeframe_str}: {e}")
                    import traceback
                    print(f"  üìç Traceback: {traceback.format_exc()}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "symbol": symbol,
            "collection_date": datetime.now().isoformat(),
            "days_collected": days,
            "timeframes": [tf.value for tf in collected_data.keys()],
            "total_candles": {tf.value: len(df) for tf, df in collected_data.items()},
            "api_type": "public",
        }
        
        with open(processed_dir / f"{symbol}_public_metadata.json", "w") as f:
            json.dump(metadata, f, indent=2, default=str)
        
        return collected_data


@click.command()
@click.option("--symbol", default="SOLUSDT", help="–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª")
@click.option("--days", default=30, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–±–æ—Ä–∞")
@click.option("--timeframes", default="1m,5m,15m,1h", help="–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
@click.option("--output", default="data", help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
def main(symbol: str, days: int, timeframes: str, output: str):
    """–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API Bybit."""
    
    setup_logging(log_level="INFO", log_format="text")
    
    print("üåê –ü—É–±–ª–∏—á–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö Bybit")
    print("=" * 50)
    
    collector = PublicDataCollector()
    timeframes_list = [tf.strip() for tf in timeframes.split(",")]
    
    async def run():
        try:
            data = await collector.collect_historical_data(
                symbol=symbol,
                timeframes=timeframes_list,
                days=days,
                output_dir=output,
            )
            
            print(f"üéâ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output}/")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
            print("\nüìä –°–≤–æ–¥–∫–∞:")
            for tf, df in data.items():
                print(f"  {tf.value:>4}: {len(df):>6} —Å–≤–µ—á–µ–π")
                if len(df) > 0:
                    start_date = df.index[0].strftime("%Y-%m-%d %H:%M")
                    end_date = df.index[-1].strftime("%Y-%m-%d %H:%M")
                    print(f"        {start_date} ‚Üí {end_date}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.run(run())


if __name__ == "__main__":
    main()
